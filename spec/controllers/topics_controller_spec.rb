require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TopicsController, :type => :controller do

  describe "GET index" do
    before do
      create(:topic)
      create(:topic, :closed)
    end

    xit "assigns all topics as @topics" do
      get :index, {}
      expect(assigns(:topics).count) eq(1)
    end
  end

  describe "GET show" do
    xit "assigns the requested topic as @topic" do
      topic = Topic.create! valid_attributes
      get :show, {:id => topic.to_param}, valid_session
      expect(assigns(:topic)).to eq(topic)
    end
  end

  describe "GET new" do
    xit "assigns a new topic as @topic" do
      get :new, {}, valid_session
      expect(assigns(:topic)).to be_a_new(Topic)
    end
  end

  describe "GET edit" do
    xit "assigns the requested topic as @topic" do
      topic = Topic.create! valid_attributes
      get :edit, {:id => topic.to_param}, valid_session
      expect(assigns(:topic)).to eq(topic)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      xit "creates a new Topic" do
        expect {
          post :create, {:topic => valid_attributes}, valid_session
        }.to change(Topic, :count).by(1)
      end

      xit "assigns a newly created topic as @topic" do
        post :create, {:topic => valid_attributes}, valid_session
        expect(assigns(:topic)).to be_a(Topic)
        expect(assigns(:topic)).to be_persisted
      end

      xit "redirects to the created topic" do
        post :create, {:topic => valid_attributes}, valid_session
        expect(response).to redirect_to(Topic.last)
      end
    end

    describe "with invalid params" do
      xit "assigns a newly created but unsaved topic as @topic" do
        post :create, {:topic => invalid_attributes}, valid_session
        expect(assigns(:topic)).to be_a_new(Topic)
      end

      xit "re-renders the 'new' template" do
        post :create, {:topic => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      xit "updates the requested topic" do
        topic = Topic.create! valid_attributes
        put :update, {:id => topic.to_param, :topic => new_attributes}, valid_session
        topic.reload
        skip("Add assertions for updated state")
      end

      xit "assigns the requested topic as @topic" do
        topic = Topic.create! valid_attributes
        put :update, {:id => topic.to_param, :topic => valid_attributes}, valid_session
        expect(assigns(:topic)).to eq(topic)
      end

      xit "redirects to the topic" do
        topic = Topic.create! valid_attributes
        put :update, {:id => topic.to_param, :topic => valid_attributes}, valid_session
        expect(response).to redirect_to(topic)
      end
    end

    describe "with invalid params" do
      xit "assigns the topic as @topic" do
        topic = Topic.create! valid_attributes
        put :update, {:id => topic.to_param, :topic => invalid_attributes}, valid_session
        expect(assigns(:topic)).to eq(topic)
      end

      xit "re-renders the 'edit' template" do
        topic = Topic.create! valid_attributes
        put :update, {:id => topic.to_param, :topic => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    xit "destroys the requested topic" do
      topic = Topic.create! valid_attributes
      expect {
        delete :destroy, {:id => topic.to_param}, valid_session
      }.to change(Topic, :count).by(-1)
    end

    xit "redirects to the topics list" do
      topic = Topic.create! valid_attributes
      delete :destroy, {:id => topic.to_param}, valid_session
      expect(response).to redirect_to(topics_url)
    end
  end

end
